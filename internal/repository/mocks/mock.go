// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/tumbleweedd/mediasoft-intership/customer-service/internal/model"
	customer "gitlab.com/mediasoft-internship/final-task/contracts/pkg/contracts/customer"
)

// MockOffice is a mock of Office interface.
type MockOffice struct {
	ctrl     *gomock.Controller
	recorder *MockOfficeMockRecorder
}

// MockOfficeMockRecorder is the mock recorder for MockOffice.
type MockOfficeMockRecorder struct {
	mock *MockOffice
}

// NewMockOffice creates a new mock instance.
func NewMockOffice(ctrl *gomock.Controller) *MockOffice {
	mock := &MockOffice{ctrl: ctrl}
	mock.recorder = &MockOfficeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOffice) EXPECT() *MockOfficeMockRecorder {
	return m.recorder
}

// CreateOffice mocks base method.
func (m *MockOffice) CreateOffice(uuId uuid.UUID, office model.Office) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffice", uuId, office)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOffice indicates an expected call of CreateOffice.
func (mr *MockOfficeMockRecorder) CreateOffice(uuId, office interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffice", reflect.TypeOf((*MockOffice)(nil).CreateOffice), uuId, office)
}

// GetOffice mocks base method.
func (m *MockOffice) GetOffice(officeUuid uuid.UUID) (model.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffice", officeUuid)
	ret0, _ := ret[0].(model.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffice indicates an expected call of GetOffice.
func (mr *MockOfficeMockRecorder) GetOffice(officeUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffice", reflect.TypeOf((*MockOffice)(nil).GetOffice), officeUuid)
}

// GetOfficeByUserUUID mocks base method.
func (m *MockOffice) GetOfficeByUserUUID(userUUID uuid.UUID) (model.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficeByUserUUID", userUUID)
	ret0, _ := ret[0].(model.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficeByUserUUID indicates an expected call of GetOfficeByUserUUID.
func (mr *MockOfficeMockRecorder) GetOfficeByUserUUID(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficeByUserUUID", reflect.TypeOf((*MockOffice)(nil).GetOfficeByUserUUID), userUUID)
}

// GetOfficesList mocks base method.
func (m *MockOffice) GetOfficesList() ([]*model.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficesList")
	ret0, _ := ret[0].([]*model.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficesList indicates an expected call of GetOfficesList.
func (mr *MockOfficeMockRecorder) GetOfficesList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficesList", reflect.TypeOf((*MockOffice)(nil).GetOfficesList))
}

// MockOrder is a mock of Order interface.
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder.
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance.
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrder) CreateOrder(order model.Order, salads, garnishes, meats, soups, drinks, desserts []*customer.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", order, salads, garnishes, meats, soups, drinks, desserts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderMockRecorder) CreateOrder(order, salads, garnishes, meats, soups, drinks, desserts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrder)(nil).CreateOrder), order, salads, garnishes, meats, soups, drinks, desserts)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(uuId uuid.UUID, user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", uuId, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(uuId, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), uuId, user)
}

// GetUsersList mocks base method.
func (m *MockUser) GetUsersList(officeUuid uuid.UUID) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersList", officeUuid)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersList indicates an expected call of GetUsersList.
func (mr *MockUserMockRecorder) GetUsersList(officeUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersList", reflect.TypeOf((*MockUser)(nil).GetUsersList), officeUuid)
}
